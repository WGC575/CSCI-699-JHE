@INPROCEEDINGS{Dragan,
author={N. {Dragan} and M. L. {Collard} and M. {Hammad} and J. I. {Maletic}},
booktitle={2011 27th IEEE International Conference on Software Maintenance (ICSM)},
title={Using stereotypes to help characterize commits},
year={2011},
volume={},
number={},
pages={520-523},
keywords={configuration management;reverse engineering;software maintenance;system documentation;version control system;automatic reverse engineering;method stereotypes;change descriptor;commit categorization;design change understanding;redocumenation;Production facilities;Welding;method stereotypes;commit types;reverse engineering;redocumentation},
doi={10.1109/ICSM.2011.6080822},
ISSN={1063-6773},
month={Sep.},}

@INPROCEEDINGS{Hindle_auto,
author={A. {Hindle} and D. M. {German} and M. W. {Godfrey} and R. C. {Holt}},
booktitle={2009 IEEE 17th International Conference on Program Comprehension},
title={Automatic classication of large changes into maintenance categories},
year={2009},
volume={},
number={},
pages={30-39},
keywords={learning (artificial intelligence);meta data;software maintenance;task analysis;automatic classification;maintenance categories;software systems;machine learning;commit metadata;commit messages;source control system;maintenance task;Control systems;Programming profession;Automatic control;Software systems;Maintenance;Machine learning;Automation;Feature extraction;Merging;Software libraries},
doi={10.1109/ICPC.2009.5090025},
ISSN={1092-8138},
month={May},}

@InProceedings{Mauczka,
author="Mauczka, Andreas
and Huber, Markus
and Schanes, Christian
and Schramm, Wolfgang
and Bernhart, Mario
and Grechenig, Thomas",
editor="de Lara, Juan
and Zisman, Andrea",
title="Tracing Your Maintenance Work -- A Cross-Project Validation of an Automated Classification Dictionary for Commit Messages",
booktitle="Fundamental Approaches to Software Engineering",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="301--315",
abstract="A commit message is a description of a change in a Version Control System (VCS). Besides the actual description of the change, it can also serve as an indicator for the purpose of the change, e.g. a change to refactor code might be accompanied by a commit message in the form of ``Refactored class XY to improve readability''. We would label the change in our example a perfective change, according to maintenance literature. This simplified example shows how it is possible to classify a change by its commit message. However, commit messages are unstructured, textual data and efforts to automatically label changes into categories like perfective have only been applied to a small set of projects within the same company or the same community. In this work, we present a cross-project evaluated and valid mapping of changes to the code base and their purpose that is usable without any customization on any open-source project. We provide further the Eclipse Plug-In Subcat which allows for a comfortable analysis of projects from within Eclipse. By using Subcat, we are able to automatically assess if a commit to the code was e.g. a bug fix or a refactoring. This information is very useful for e.g. developer profiling or locating bad smells in modules.",
isbn="978-3-642-28872-2"
}

@inproceedings{Swanson,
 author = {Swanson, E. Burton},
 title = {The Dimensions of Maintenance},
 booktitle = {Proceedings of the 2Nd International Conference on Software Engineering},
 series = {ICSE '76},
 year = {1976},
 location = {San Francisco, California, USA},
 pages = {492--497},
 numpages = {6},
 url = {http://dl.acm.org/citation.cfm?id=800253.807723},
 acmid = {807723},
 publisher = {IEEE Computer Society Press},
 address = {Los Alamitos, CA, USA},
 keywords = {Performance measurement, Software maintenance},
} 

@inproceedings{Hindle_cate,
 author = {Hindle, Abram and German, Daniel M. and Holt, Ric},
 title = {What Do Large Commits Tell Us?: A Taxonomical Study of Large Commits},
 booktitle = {Proceedings of the 2008 International Working Conference on Mining Software Repositories},
 series = {MSR '08},
 year = {2008},
 isbn = {978-1-60558-024-1},
 location = {Leipzig, Germany},
 pages = {99--108},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1370750.1370773},
 doi = {10.1145/1370750.1370773},
 acmid = {1370773},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {large commits, software evolution, source control system},
} 

@inproceedings{pooyan_esem,
 author = {Behnamghader, Pooyan and Meemeng, Patavee and Fostiropoulos, Iordanis and Huang, Di and Srisopha, Kamonphop and Boehm, Barry},
 title = {A Scalable and Efficient Approach for Compiling and Analyzing Commit History},
 booktitle = {Proceedings of the 12th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
 series = {ESEM '18},
 year = {2018},
 isbn = {978-1-4503-5823-1},
 location = {Oulu, Finland},
 pages = {27:1--27:10},
 articleno = {27},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/3239235.3239237},
 doi = {10.1145/3239235.3239237},
 acmid = {3239237},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {mining software repositories, software compilability, software maintainbaility evolution, software technical debt},
} 

@INPROCEEDINGS{pooyan_qrs,
author={P. {Behnamghader} and R. {Alfayez} and K. {Srisopha} and B. {Boehm}},
booktitle={2017 IEEE International Conference on Software Quality, Reliability and Security (QRS)},
title={Towards Better Understanding of Software Quality Evolution through Commit-Impact Analysis},
year={2017},
volume={},
number={},
pages={251-262},
keywords={program compilers;software metrics;software quality;source code (software);commit-impact analysis;source code;software quality metrics;software quality indicator;Apache Java software systems;Measurement;Tools;Security;Software systems;Software quality;Computer bugs;software quality evolution;mining software repositories;commit-impact analysis},
doi={10.1109/QRS.2017.36},
ISSN={},
month={July},}

@INPROCEEDINGS{alali_2008,
author={A. {Alali} and H. {Kagdi} and J. I. {Maletic}},
booktitle={2008 16th IEEE International Conference on Program Comprehension},
title={What's a Typical Commit? A Characterization of Open Source Software Repositories},
year={2008},
volume={},
number={},
pages={182-191},
keywords={configuration management;public domain software;software maintenance;open source software repositories;version control systems;maintenance activities;Open source software;History;Control systems;Vocabulary;Software systems;Computer science;Solids;mining software repositories;commit analysis},
doi={10.1109/ICPC.2008.24},
ISSN={1092-8138},
month={June},}

@techreport{dodaro2015government,
	title={Government Efficiency and Effectiveness: Opportunities to Reduce Fragmentation, Overlap, and Duplication and Achieve Other Financial Benefits},
	author={Dodaro, Gene L},
	year={2015},
	institution={GOVERNMENT ACCOUNTABILITY OFFICE WASHINGTON DC}
}

@article{redman2008weapon,
	title={Weapon System Design Using Life Cycle Costs},
	author={Redman, Q},
	journal={Raytheon Presenatation},
	year={2008}
}

@article{koskinen2009software,
	title={Software maintenance fundamentals},
	author={Koskinen, Jussi},
	journal={Encyclopedia of Software Engineering, P. Laplante, Ed., Taylor \& Francis Group},
	year={2009}
}

@Inbook{kaur_2018,
	author="Kaur, Arvinder
	and Chopra, Deepti",
	editor="Hu, Yu-Chen
	and Tiwari, Shailesh
	and Mishra, Krishn K.
	and Trivedi, Munesh C.",
	title="GCC-Git Change Classifier for Extraction and Classification of Changes in Software Systems",
	bookTitle="Intelligent Communication and Computational Technologies: Proceedings of Internet of Things for Technological Development, IoT4TD 2017",
	year="2018",
	publisher="Springer Singapore",
	address="Singapore",
	pages="259--267"
}

@INPROCEEDINGS{8170083, 
author={F. Hassan and S. Mostafa and E. S. L. Lam and X. Wang}, 
booktitle={2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)}, 
title={Automatic Building of Java Projects in Software Repositories: A Study on Feasibility and Challenges}, 
year={2017}, 
volume={}, 
number={}, 
pages={38-47}, 
keywords={data mining;Java;program diagnostics;project management;software development management;software engineering;software maintenance;software build tools;large-scale advanced program analysis;data mining;software artifacts;software engineering researchers;automatic software building;200 Java projects;detailed build failure taxonomy;57% build failures;automatic building;software repositories;Tools;Software;Buildings;Java;Androids;Humanoid robots;Software engineering}, 
doi={10.1109/ESEM.2017.11}, 
ISSN={}, 
month={Nov},}

@article{SMR:SMR1838,
author = {Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Di Penta, Massimiliano and Oliveto, Rocco and De Lucia, Andrea and Poshyvanyk, Denys},
title = {There and back again: Can you compile that snapshot?},
journal = {Journal of Software: Evolution and Process},
volume = {29},
number = {4},
pages = {e1838},
year = {2017},
keywords = {broken snapshots, empirical studies, mining software repositories, software quality},
doi = {10.1002/smr.1838},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1838},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1838},
note = {e1838 smr.1838},
abstract = {A broken snapshot represents a snapshot from a project's change history that cannot be compiled. Broken snapshots can have significant implications for researchers, as they could hinder any analysis of the past project history that requires code to be compiled. Noticeably, while some broken snapshots may be observable in change history repositories (e.g., no longer available dependencies), some of them may not necessarily happen during the actual development. In this paper, we systematically study the compilability of broken snapshots in 219â395 snapshots belonging to 100 Java projects from the Apache Software Foundation, all relying on Maven as an automated build tool. We investigated broken snapshots from 2 different perspectives: (1) how frequently they happen and (2) likely causes behind them. The empirical results indicate that broken snapshots occur in most (96\%) of the projects we studied and that they are mainly due to problems related to the resolution of dependencies. On average, only 38\% of the change history of the analyzed systems is currently successfully compilable.}
}

@INPROCEEDINGS{Hassan2017ESEM, 
author={F. Hassan and X. Wang}, 
booktitle={2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)}, 
title={Change-Aware Build Prediction Model for Stall Avoidance in Continuous Integration}, 
year={2017}, 
volume={}, 
number={}, 
pages={157-162}, 
keywords={data mining;program testing;software development management;software metrics;change-aware build prediction model;stall avoidance;Continuous Integration(CI);widely used development practice;central repository;CI servers;code change submission;unit testing;integration testing;continuous submission;code modification;build latency time;build pipeline;cross-project prediction scenario;Predictive models;Software;Data models;Java;Feature extraction;Entropy;Buildings;Continuous Integration;Software Build Outcome Prediction}, 
doi={10.1109/ESEM.2017.23}, 
ISSN={}, 
month={Nov},}

@book{38631e0608b54d4299d5707f3a78debf,
	title = "Design science methodology for information systems and software engineering",
	abstract = "Textbook on design science methodology. http://link.springer.com/book/10.1007/978-3-662-43839-8",
	keywords = "IS-Design science methodology, EWI-25449, SCS-Services, IR-93356, METIS-309741",
	author = "Wieringa, {Roelf J.}",
	note = "10.1007/978-3-662-43839-8",
	year = "2014",
	doi = "10.1007/978-3-662-43839-8",
	language = "Undefined",
	isbn = "978-3-662-43838-1",
	publisher = "Springer",
}

@inproceedings{Sulir:2016:QSJ:3001878.3001882,
	author = {Sul\'{\i}r, Mat\'{u}\v{s} and Porub\"{a}n, Jaroslav},
	title = {A Quantitative Study of Java Software Buildability},
	booktitle = {Proceedings of the 7th International Workshop on Evaluation and Usability of Programming Languages and Tools},
	series = {PLATEAU 2016},
	year = {2016},
	isbn = {978-1-4503-4638-2},
	location = {Amsterdam, Netherlands},
	pages = {17--25},
	numpages = {9},
	url = {http://doi.acm.org/10.1145/3001878.3001882},
	doi = {10.1145/3001878.3001882},
	acmid = {3001882},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Ant, Build systems, Gradle, Maven, error logs},
} 

@inproceedings{Seo:2014:PBE:2568225.2568255,
	author = {Seo, Hyunmin and Sadowski, Caitlin and Elbaum, Sebastian and Aftandilian, Edward and Bowdidge, Robert},
	title = {Programmers' Build Errors: A Case Study (at Google)},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	series = {ICSE 2014},
	year = {2014},
	isbn = {978-1-4503-2756-5},
	location = {Hyderabad, India},
	pages = {724--734},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/2568225.2568255},
	doi = {10.1145/2568225.2568255},
	acmid = {2568255},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Software builds, build errors, empirical analysis},
} 

@inproceedings{macho2018automatically,
	title={Automatically repairing dependency-related build breakage},
	author={Macho, Christian and McIntosh, Shane and Pinzger, Martin},
	booktitle={2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
	pages={106--117},
	year={2018},
	organization={IEEE}
}

@INPROCEEDINGS{qrs2020,  author={J. {He} and S. {Min} and K. {Ogudu} and M. {Shoga} and A. {Polak} and I. {Fostiropoulos} and B. {Boehm} and P. {Behnamghader}},  booktitle={2020 IEEE 20th International Conference on Software Quality, Reliability and Security (QRS)},   title={The Characteristics and Impact of Uncompilable Code Changes on Software Quality Evolution},   year={2020},  volume={},  number={},  pages={418-429},  doi={10.1109/QRS51102.2020.00061}}

@INPROCEEDINGS{cocomo1995,
	title={Cost models for future software life cycle processes: COCOMO 2.0},
	author={Barry Boehm and Bradford Clark and Ellis Horowitz and Chris Westland and Ray Madachy and Richard Selby},
	booktitle={Annals of Software Engineering},
	pages={57-94},
	year={1995},
	doi = {10.1007/BF02249046}
}

@article{agile2004,
  title={An introduction to agile methods.},
  author={Cohen, David and Lindvall, Mikael and Costa, Patricia},
  journal={Adv. Comput.},
  volume={62},
  number={03},
  pages={1--66},
  year={2004}
}
@ARTICLE{devops2016,
  author={C. {Ebert} and G. {Gallardo} and J. {Hernantes} and N. {Serrano}},
  journal={IEEE Software}, 
  title={DevOps}, 
  year={2016},
  volume={33},
  number={3},
  pages={94-100},
  doi={10.1109/MS.2016.68}}

@book{icsm2014,
  title={The incremental commitment spiral model: Principles and practices for successful systems and software},
  author={Boehm, Barry and Lane, Jo Ann and Koolmanojwong, Supannika and Turner, Richard},
  year={2014},
  publisher={Addison-Wesley Professional}
}

@inproceedings{purushothaman2004towards,
  title={Towards understanding the rhetoric of small changes-extended abstract},
  author={Purushothaman, Ranjith and Perry, Dewayne E},
  booktitle={International Workshop on Mining Software Repositories (MSR 2004), International Conference on Software Engineering},
  pages={90--94},
  year={2004},
  organization={IET}
}

@inproceedings{arafat2009commit,
  title={The commit size distribution of open source software},
  author={Arafat, Oliver and Riehle, Dirk},
  booktitle={2009 42nd Hawaii International Conference on System Sciences},
  pages={1--8},
  year={2009},
  organization={IEEE}
}

@inproceedings{hattori2008nature,
  title={On the nature of commits},
  author={Hattori, Lile P and Lanza, Michele},
  booktitle={2008 23rd IEEE/ACM International Conference on Automated Software Engineering-Workshops},
  pages={63--71},
  year={2008},
  organization={IEEE}
}

@inproceedings{wang2013understanding,
  title={Understanding widespread changes: A taxonomic study},
  author={Wang, Shaowei and Lo, David and Jiang, Xingxiao},
  booktitle={2013 17th European Conference on Software Maintenance and Reengineering},
  pages={5--14},
  year={2013},
  organization={IEEE}
}

@article{yan2016automatically,
  title={Automatically classifying software changes via discriminative topic model: Supporting multi-category and cross-project},
  author={Yan, Meng and Fu, Ying and Zhang, Xiaohong and Yang, Dan and Xu, Ling and Kymer, Jeffrey D},
  journal={Journal of Systems and Software},
  volume={113},
  pages={296--308},
  year={2016},
  publisher={Elsevier}
}

@inproceedings{levin2017boosting,
  title={Boosting automatic commit classification into maintenance activities by utilizing source code changes},
  author={Levin, Stanislav and Yehudai, Amiram},
  booktitle={Proceedings of the 13th International Conference on Predictive Models and Data Analytics in Software Engineering},
  pages={97--106},
  year={2017}
}

@inproceedings{mariano2019feature,
  title={Feature changes in source code for commit classification into maintenance activities},
  author={Mariano, Richard VR and dos Santos, Geanderson E and de Almeida, Markos V and Brand{\~a}o, Wladmir C},
  booktitle={2019 18th IEEE International Conference On Machine Learning And Applications (ICMLA)},
  pages={515--518},
  year={2019},
  organization={IEEE}
}

@inproceedings{honel2019importance,
  title={Importance and aptitude of source code density for commit classification into maintenance activities},
  author={H{\"o}nel, Sebastian and Ericsson, Morgan and L{\"o}we, Welf and Wingkvist, Anna},
  booktitle={2019 IEEE 19th International Conference on Software Quality, Reliability and Security (QRS)},
  pages={109--120},
  year={2019},
  organization={IEEE}
}

@article{dos2020commit,
  title={Commit Classification using Natural Language Processing: Experiments over Labeled Datasets},
  author={dos Santos, Geanderson E and Figueiredo, Eduardo},
  year={2020}
}

@article{ghadhab2021augmenting,
  title={Augmenting commit classification by using fine-grained source code changes and a pre-trained deep neural language model},
  author={Ghadhab, Lobna and Jenhani, Ilyes and Mkaouer, Mohamed Wiem and Messaoud, Montassar Ben},
  journal={Information and Software Technology},
  volume={135},
  pages={106566},
  year={2021},
  publisher={Elsevier}
}

@inproceedings{cortes2014automatically,
  title={On automatically generating commit messages via summarization of source code changes},
  author={Cort{\'e}s-Coy, Luis Fernando and Linares-V{\'a}squez, Mario and Aponte, Jairo and Poshyvanyk, Denys},
  booktitle={2014 IEEE 14th International Working Conference on Source Code Analysis and Manipulation},
  pages={275--284},
  year={2014},
  organization={IEEE}
}

@inproceedings{linares2015changescribe,
  title={Changescribe: A tool for automatically generating commit messages},
  author={Linares-V{\'a}squez, Mario and Cort{\'e}s-Coy, Luis Fernando and Aponte, Jairo and Poshyvanyk, Denys},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
  volume={2},
  pages={709--712},
  year={2015},
  organization={IEEE}
}

@inproceedings{jiang2017automatically,
  title={Automatically generating commit messages from diffs using neural machine translation},
  author={Jiang, Siyuan and Armaly, Ameer and McMillan, Collin},
  booktitle={2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  pages={135--146},
  year={2017},
  organization={IEEE}
}